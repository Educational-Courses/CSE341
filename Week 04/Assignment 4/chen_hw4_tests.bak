#lang racket
;;; Chun-Wei Chen
;;; CSE 341
;;; Assignment 4
;;; 10/26/12

;; starting file for unit tests for MUPL interpreter
(require "chen_hw4.rkt")



(require rackunit)

(define mupl-tests 
  (test-suite 
   "tests for mupl"
   
   ;; test if racketlist->mupllist converts a Racket list to a correct form of MUPL list.
   (check-equal? (racketlist->mupllist (list (int 1) (int 2) (int 3)))
                 (apair (int 1) (apair (int 2) (apair (int 3) (aunit)))))
   (check-equal? (racketlist->mupllist (list)) (aunit))
   (check-exn #rx"list" (lambda () (racketlist->mupllist 3)))
   
   ;; test if mupllist->racketlist convert a MUPL list to a correct form of Racket list.
   (check-equal? (mupllist->racketlist (apair (int 1) (apair (int 2) (apair (int 3) (aunit)))))
                 (list (int 1) (int 2) (int 3)))
   (check-equal? (mupllist->racketlist (racketlist->mupllist (list (int 1) (int 2) (int 3))))
                 (list (int 1) (int 2) (int 3)))
   (check-equal? (mupllist->racketlist (aunit)) (list))
   (check-exn #rx"MUPL" (lambda () (mupllist->racketlist (int 3))))
   
   ;; integers should evaluate to themselves
   (check-equal? (eval-prog (int 5)) (int 5))
   
   ;; test var
   (check-exn #rx"unbound" (lambda () (eval-prog (var "foo"))))
   (check-equal? (eval-in-env (list (cons "x" (int 3))) (var "x")) (int 3))
   
   ;; test that 3+4 equals 7
   (check-equal? (eval-prog (add (int 3) (int 4))) (int 7))
   
   ;; Check that 'add' checks the types of its arguments:
   ;; try adding 3 and aunit, and make sure it raises an exception.
   ;; The exception's message must contain the string "MUPL" -- if we
   ;; just checked that the call raises an exception this wouldn't be
   ;; enough, since the underlying Racket interpreter would also raise
   ;; an exception even if the MUPL interpreter didn't catch this.
   (check-exn #rx"MUPL" (lambda () (eval-prog (add (int 3) (aunit)))))
   
   ; test isaunit
   (check-equal? (eval-prog (isaunit (aunit))) (int 1))
   (check-equal? (eval-prog (isaunit (int 1))) (int 0))
   
   ;; test fst
   (check-equal? (eval-prog (fst (apair (int 3) (aunit)))) (int 3))
   (check-exn #rx"MUPL" (lambda () (eval-prog (fst (int 3)))))
   (check-equal? (eval-prog (fst (apair (add (int 1) (int 2)) (int 0)))) (int 3))
   
   ;; test snd
   (check-equal? (eval-prog (snd (apair (int 3) (aunit)))) (eval-prog (aunit)))
   (check-equal? (eval-prog (snd (apair (int 3) (ifgreater (int 5) (int 4) (int 2) (int 1))))) 
                 (int 2))
   (check-exn #rx"MUPL" (lambda () (eval-prog (snd (aunit)))))
   
   ;; test ifgreater
   (check-equal? (eval-prog (ifgreater (int 3) (int 4) (int 5) (add (int 1) (int 1))))
                (int 2))
   (check-equal? (eval-prog (ifgreater (int 7) (int 4) (int 5) (add (int 1) (int 1))))
                (int 5))
   (check-equal? (eval-prog (ifgreater (int 4) (int 4) (int 5) (add (int 1) (int 1))))
                (int 2))
   
   ;; define and test a double function in MUPL
   (check-equal? 
    (eval-prog 
     (mlet "double" 
           (fun "double" "x" (add (var "x") (var "x")))
           (call (var "double") (int 10))))
    (int 20))
   
   ;; define and test a greater-than-100 function in MUPL
   (check-equal? 
    (eval-prog 
     (mlet "greater-than-100" 
           (fun "greater-than-100" "x" (ifgreater (var "x") (int 100) (int 1) (int 0)))
           (call (var "greater-than-100") (int 101))))
    (int 1))
   
   ;; Define a range function in MUPL that takes two parameters lo and hi and returns
   ;; a list of integers between lo and hi inclusive.
   ;; Here's a range function in ordinary Racket:
   ;;   (define (range lo hi)
   ;;     (if (> lo hi) null (cons lo (range (+ 1 lo) hi))))
   ;; But in MUPL this needs to be curried.  Racket has syntax for this:
   ;;   (define ((range lo) hi)
   ;;     (if (> lo hi) null (cons lo ((range (+ 1 lo)) hi))))
   ;; However, let's write it out to avoid obscuring what's going on (still in Racket):
   ;;   (define (range lo)
   ;;     (lambda (hi) (if (> lo hi) null (cons lo ((range (+ 1 lo)) hi)))))
   ;; then ((range 5) 8) evaluates to (5 6 7 8)
   ;; OK, finally here it is in MUPL and as a unit test.
   ;; This is written out without shortcuts to make it clearer what's going on (maybe???)
   (check-equal? 
    (eval-prog 
     (mlet "range" 
           (fun "range" "lo"
                (fun #f "hi"
                     (ifgreater (var "lo") (var "hi")
                                (aunit)
                                (apair (var "lo") (call (call (var "range") (add (int 1) (var "lo"))) (var "hi"))))))
           (call (call (var "range") (int 5)) (int 8))))
    (apair (int 5) (apair (int 6) (apair (int 7) (apair (int 8) (aunit))))) ; the list (5 6 7 8) in MUPL
    )
   ;; ps - in Haskell this would just be:
   ;;    range lo hi = [lo..hi]
   ;; (couldn't resist ...)
   
   ;; define and test a less-than-100-fibonacci function that 
   ;; shows a MUPL list of fibonacci numbers. 
   (check-equal? 
    (eval-prog 
     (mlet "less-than-100-fibonacci" 
           (fun "less-than-100-fibonacci" "begin"
                (fun #f "end"
                     (ifgreater (var "begin") (int 100)
                                (aunit)
                                (apair (var "begin") 
                                       (call (call (var "less-than-100-fibonacci") 
                                                   (var "end")) (add (var "begin") (var "end")))))))
           (call (call (var "less-than-100-fibonacci") (int 1)) (int 1))))
    (apair (int 1) (apair (int 1) (apair (int 2) (apair (int 3) (apair (int 5) (apair (int 8) (apair (int 13) (apair (int 21) (apair (int 34) (apair (int 55) (apair (int 89) (aunit)))))))))))))
   
   ;; test if ifaunit converts to the MUPL expressions and returns the
   ;; correct value when evaluate the expressions.
   (check-equal? (ifaunit (aunit) (add (int 1) (int 2)) (int 5))
                 (ifgreater (isaunit (aunit)) (int 0) (add (int 1) (int 2)) (int 5)))
   (check-equal? (eval-prog (ifaunit (aunit) (add (int 1) (int 2)) (int 5))) (int 3))
   (check-equal? (ifaunit (int 3) (add (int 1) (int 2)) (int 5)) 
                 (ifgreater (isaunit (int 3)) (int 0) (add (int 1) (int 2)) (int 5)))
   (check-equal? (eval-prog (ifaunit (int 3) (add (int 1) (int 2)) (int 5))) (int 5))
   
   ;; test if mlet* converts to the MUPL expressions and returns the
   ;; correct value when evaluate the expressions.
   (check-equal? (mlet* (list) (add (var "x") (int 3))) (add (var "x") (int 3)))
   (check-exn #rx"unbound" (lambda () (eval-prog (mlet* (list) (add (var "x") (int 3))))))
   (check-equal? (mlet* (list (cons "x" (int 4))) (add (var "x") (int 3)))
                 (mlet "x" (int 4) (add (var "x") (int 3))))
   (check-equal? (eval-prog (mlet* (list (cons "x" (int 4))) (add (var "x") (int 3))))
                 (int 7))
   (check-equal? (mlet* (list (cons "x" (int 4)) (cons "y" (add (var "x") (int 3))))
                 (add (var "x") (var "y")))
                 (mlet "x" (int 4) (mlet "y" (add (var "x") (int 3)) 
                                         (add (var "x") (var "y")))))
   (check-equal? (eval-prog (mlet* (list (cons "x" (int 4)) 
                                         (cons "y" (add (var "x") (int 3)))) 
                                   (add (var "x") (var "y")))) (int 11))
   
   ;; test if ifeq converts to the MUPL expressions and returns the
   ;; correct value when evaluate the expressions.
   (check-equal? (ifeq (int 3) (int 3) (add (int 1) (int 1)) (add (int 2) (int 2)))
                 (mlet "_x" (int 3) 
                       (mlet "_y" (int 3) 
                             (ifgreater (var "_x") (var "_y") (add (int 2) (int 2))
                                        (ifgreater (var "_y") (var "_x") 
                                                   (add (int 2) (int 2))
                                                   (add (int 1) (int 1)))))))
   (check-equal? (eval-prog (ifeq (int 3) (int 3) (add (int 1) (int 1)) (add (int 2) (int 2))))
                 (int 2))
   (check-equal? (eval-prog (ifeq (int 3) (add (int 3) (int 1)) (add (int 1) (int 1)) (add (int 2) (int 2))))
                 (int 4))
   (check-exn #rx"unbound" (lambda () (eval-prog (ifeq (int 3) (var "x") (int 4) (int 5)))))
   
;   ;; test the mupl-mapAddN function -- add 7 to each element of the list (3 4 9)
;   (check-equal? (eval-prog (call (call mupl-mapAddN (int 7))
;                                  (racketlist->mupllist (list (int 3) (int 4) (int 9)))))
;                 (racketlist->mupllist (list (int 10) (int 11) (int 16))))

   ))

(require rackunit/text-ui)
;; this line runs the tests ....
(run-tests mupl-tests)
